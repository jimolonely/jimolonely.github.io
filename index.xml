<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>我是寂寞 on 孤独的寂寞</title><link>https://jimolonely.github.io/</link><description>Recent content in 我是寂寞 on 孤独的寂寞</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 21 Apr 2022 16:59:22 +0800</lastBuildDate><atom:link href="https://jimolonely.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>秒级百G日志架构</title><link>https://jimolonely.github.io/arch/case/jd-log-handle-arch/</link><pubDate>Thu, 21 Apr 2022 16:59:22 +0800</pubDate><guid>https://jimolonely.github.io/arch/case/jd-log-handle-arch/</guid><description>日志架构分为几个部分：
采集日志&amp;ndash;》传输日志&amp;ndash;》存储日志&amp;ndash;》查询/展示日志
下面是一些日志架构。
文件日志存储 在小规模（个位数机器）、低并发的应用下，直接使用log4j/logback将日志输出到本地文件即可。
ELK三剑客 稍微常见的日志接收、存储和查询架构就是ELK（ElasticSearch、Logstash/Filebeat、Kibana）。
对于现成的开源框架，用得也挺广泛。
不过，当日志量很大时，硬件开销不容小觑。
基于MQ 比如使用Kafka，单台几十万的并发可以达到，压力在传输和存储上。
传输需要经过3次序列化和反序列化（采集时写入本地硬盘，进出MQ，入库）；存储一般用ES或HBase。
对于每秒上百G的日志，需要的机器至少上千台（根据硬盘写入速度200MB来算，几百G/s的日志量），这个开销也是很大的。
更精简的架构 减少传输量：压缩日志，一般能高达80%以上的压缩率 减少序列化次数：需要减少中转流程，采集完不用落盘，直接发送给日志处理服务 更强的存储数据库：列式存储的ClickHouse 下面可以实现一个简单的客户端和日志处理端：
日志发送客户端：基于UDP传输（节省传输量），需要考虑UDP最大传输量64KB，换HTTP传输。 日志处理服务：接收日志，写入ClickHouse 这是某东的日志处理架构，也算是与时俱进了。</description></item><item><title>我如何买东西</title><link>https://jimolonely.github.io/life/economy/how-do-i-buy-things/</link><pubDate>Mon, 18 Apr 2022 21:22:01 +0800</pubDate><guid>https://jimolonely.github.io/life/economy/how-do-i-buy-things/</guid><description>买一件物品不仅要考虑它带给我的价值，还要看到它带给我的成本。
那些你根本不会用的东西，别让它们混进来。
物品有哪些成本？ 资金：购买的成本，也是很多人只能看到的表面一次性成本 时间：使用这件物品的时间成本，同类物品带来的时间成本差异 空间：物品占用的空间成本，比如桌子占用2平米，房价是2万/m，那桌子会有4万的空间成本 物品带来的价值 解决的问题 使用频率 观赏性 买完东西的后续处理 包装盒
在搬家时</description></item><item><title>经济报告中的那些术语</title><link>https://jimolonely.github.io/life/economy/economy-terms/</link><pubDate>Mon, 18 Apr 2022 18:10:57 +0800</pubDate><guid>https://jimolonely.github.io/life/economy/economy-terms/</guid><description>先来一份简单的报告，老实说，里面都是很基础的概念，大家都看得懂，全部指数都在涨嘛。 但是我有些地方不明白，所以要搞清楚。
来份报告压压惊 国内生产总值（GDP） 第一、第二、第三产业 划分标准：根据其在社会分工体系中出现的先后顺序和与人类需要的紧迫程度的关系。
第一产业：农业(包括林业、牧业、渔业等)； 第二产业：工业(包括采掘业、制造业、自来水、电力、蒸气、热水、煤气)和建筑业； 第三产业：除上述第一、第二产业以外的其他各业。（这个我喜欢） 第三产业在现在看来非常重要且普遍，所以国家又分了4个层次，这里不展开了，关键点就是： 第三产业是对前2个产业的提升和改进
生产指数 服务业生产指数 居民消费价格指数（CPI） 工资性收入、经营性收入、财产净收入、转移净收入 什么是名义增速？ 名义增速：用生产物品和劳务的当年价格计算的的价值和去年对比 实际增速：用生产物品和劳务的去年价格计算的的价值和去年对比
例子：
去年养了100只鸡，每只3元，去年收入为300元。 今年养了200只鸡，每只6元，今年收入为1200元。
今年名义增速为：(1200-300)/300 = 300%
今年实际增速为：(200*3 - 300)/300=100%
可以看出，实际增速不考虑价格的变化，即考虑了通货膨胀。因此：
名义增速率 = 实际增速率 + 通货膨胀率 只要经济没有通缩，名义增速就大于实际增速。</description></item><item><title>Raft原理与实现</title><link>https://jimolonely.github.io/posts/distribute/raft/</link><pubDate>Mon, 18 Apr 2022 09:14:46 +0800</pubDate><guid>https://jimolonely.github.io/posts/distribute/raft/</guid><description> 什么是共识算法？ 什么是Raft算法？ Raft原理理解 Raft实现</description></item><item><title>格林定律（格林法则）- Grimm's Law</title><link>https://jimolonely.github.io/ksa/skill/english/grimms-law/</link><pubDate>Sun, 17 Apr 2022 13:15:24 +0800</pubDate><guid>https://jimolonely.github.io/ksa/skill/english/grimms-law/</guid><description>格林定律简介 我本想找一下格林定律最原始的出处，可惜没有发现，即便找到了也是德文。 所以还是从wiki里摘抄吧。
格林定律 (Grimm&amp;rsquo;s law) 是首个被发现的系统性音变，使得历史音位学诞生成为一门独立学科。 * 1806年，施勒格尔首先注意到拉丁语的p对应日耳曼语的f。 * 1818年，拉斯穆斯·拉斯克把这个对应推广到其他印欧语言，例如梵语和希腊语，并包含了所有的辅音。 * 1822年，雅各布·格林在《德语语法（Deutsche Grammatik）》一书中发表了这个法则，并进行推广把标准德语包含进来。 他注意到仍然有许多单词的辅音不能被这个规则解释，这些例外困扰了语言学家数十年，但最终被丹麦语言学家卡尔·维尔纳（Karl Verner）解释，也就是维尔纳定律。
那么格林大哥发现的这个音律变化规律是什么呢？
其实也就下面简单的几条
bʰ &amp;gt; b &amp;gt; p &amp;gt; ɸ dʰ &amp;gt; d &amp;gt; t &amp;gt; θ gʰ &amp;gt; g &amp;gt; k &amp;gt; x gʷʰ &amp;gt; gʷ &amp;gt; kʷ &amp;gt; xʷ 这几条就能用来记单词？我也是疑惑的。
但是，再结合维尔纳定律 ,整个变化就比较完整了。
聪明的广大劳动人民从此又发现了一条记单词的道路，这条路不仅能够记单词，还能了解语言的源头， 甚至同时掌握多门印欧语系的语言。
我想，这是最接近本质的一种方法了，和马斯克说的【第一性原理】如出一辙。
找资料学习 即便是简单的了解下这个定律，我已经意识到他的强大之处，相比于词根词缀的方法，格林定律更加深入本质。
可为什么19世纪就已经出现的定律，21世纪却很少有人听过？
我学了英语十几年，从没有老师告诉我还有这样一种方法。我想答案只能是：老师也不知道！
我搜索了下记单词的相关书籍，非常多，但和格林定律相关的，在大陆没有！
倒是发现了台湾和日本出过相关的书，都是在2019年出的。
台湾人出的书 格林法則 單字記憶法 ， 国内可以代购，见京东订单.
还有个日本人出的书, 据说7个月卖了50万本，看来日本也挺卷的。</description></item><item><title>SkipList跳表传奇</title><link>https://jimolonely.github.io/algo/structure/skiplist/</link><pubDate>Sun, 17 Apr 2022 10:22:48 +0800</pubDate><guid>https://jimolonely.github.io/algo/structure/skiplist/</guid><description/></item><item><title>在麒麟Linux安装Postgis</title><link>https://jimolonely.github.io/posts/linux/install-postgis-kylin/</link><pubDate>Thu, 14 Apr 2022 20:33:15 +0800</pubDate><guid>https://jimolonely.github.io/posts/linux/install-postgis-kylin/</guid><description>接着上一篇在麒麟linux上安装Postgresql12.5 ,我们来安装 PostGIS插件。
方案 因为 PostgreSQL不是通过 rpm包安装的，所以即便 PostGIS有现成的rpm包，也无法使用（需要引用 PG的包）。
所以，我们还是采用源码编译的方式。
下载PostGIS源码 我们选择的版本是3.0.5, 如果是不同版本，那么后面他所依赖的东西可能略有差别。
下载地址： http://postgis.net/stuff/postgis-3.0.5.tar.gz
编译过程 运行
./configure 报错
configure: error: could not find geos-config within the current path. You may need to try re-running configure with a --with-geosconfig parameter. 报差错原因是缺少 geos依赖， 那就安装geos
yum install geos geos-devel 再运行./configure发现报错
configure: error: could not find proj.h or proj_api.h - you may need to specify the directory of a PROJ installation using --with-projdir 报差错原因是缺少 proj依赖,那就安装</description></item><item><title>在麒麟linux上安装Postgresql12.5</title><link>https://jimolonely.github.io/posts/linux/install-postgresql-kylin/</link><pubDate>Thu, 14 Apr 2022 19:17:12 +0800</pubDate><guid>https://jimolonely.github.io/posts/linux/install-postgresql-kylin/</guid><description>本文主要实践在麒麟V10版本上通过源码编译安装PostgreSQL12.5，因为是源码编译，所以对于其他版本也具有参考性。
麒麟版本 V10
$ uname -a Linux kylin-v10-02 4.19.90-24.4.v2101.ky10.aarch64 #1 SMP Mon May 24 14:45:37 CST 2021 aarch64 aarch64 aarch64 GNU/Linux 下载PostgreSQL12.5源码 下载地址为官网：https://www.postgresql.org/ftp/source/v12.5/
上传解压到服务器。
编译源码过程 官方文档.
运行
./configure 得到如下报错：
error: readline library not found 需要安装readline
yum install readline-devel -y 然后再运行 ./configure
没有报错后，再运行
make 编译完成后得到成功提示
然后开始安装, 运行
make install 安装成功后可以看到
默认安装路径为 /usr/local/pgsql，我们需要将权限改为postgres
[root@kylin-v10-02 local]# useradd postgres [root@kylin-v10-02 local]# chown -R postgres:postgres /usr/local/pgsql/ 配置环境变量 安装完成后，还要做一些配置操作.
vim /etc/profile加入下面的环境变量配置
export PATH=/usr/local/pgsql/bin:$PATH LD_LIBRARY_PATH=/usr/local/pgsql/lib export LD_LIBRARY_PATH 然后刷新配置：</description></item><item><title>分布式事务</title><link>https://jimolonely.github.io/posts/distribute/transaction-dist/</link><pubDate>Wed, 13 Apr 2022 20:36:24 +0800</pubDate><guid>https://jimolonely.github.io/posts/distribute/transaction-dist/</guid><description> 概述 二阶段提交 三阶段提交 BASE</description></item><item><title>空冷和水冷比较</title><link>https://jimolonely.github.io/life/motor/air-cooling-vs-water-cooling/</link><pubDate>Wed, 13 Apr 2022 09:32:53 +0800</pubDate><guid>https://jimolonely.github.io/life/motor/air-cooling-vs-water-cooling/</guid><description>从以下方面比较，上表格：
比较项 空冷(风冷) 水冷</description></item><item><title>必会Shell命令</title><link>https://jimolonely.github.io/posts/linux/shell-command/</link><pubDate>Mon, 11 Apr 2022 14:38:12 +0800</pubDate><guid>https://jimolonely.github.io/posts/linux/shell-command/</guid><description>这些命令并不是先学再用，而是用到再学。一般是从一个问题出发，比如：如何通过名称查询一个进程？
如何查询一个进程命令的目录（工作空间）？ 方法1：pwdx pid 命令：pwdx得到的是启动一个命令的路径。
pwdx ${PID} 案例：知道nginx进程ID，需要知道nginx安装在哪？
# pwdx 1498563 1498563: /export/server/openresty/nginx/conf/conf.d 方法2：lsof -p pid 该命令可得到更完整的进程信息。
# lsof -p 1498563 | grep cwd nginx 1498563 root cwd DIR 8,32 37 5371079203 /export/server/openresty/nginx/conf/conf.d 方法3：/proc/pid/cwd # readlink /proc/1498563/cwd /export/server/openresty/nginx/conf/conf.</description></item><item><title>学习能力</title><link>https://jimolonely.github.io/ksa/ability/learning/</link><pubDate>Sun, 10 Apr 2022 21:44:56 +0800</pubDate><guid>https://jimolonely.github.io/ksa/ability/learning/</guid><description>我对学习能力的定义是： 将输入（知识，行为，信息等）内化成认知记忆，并能转换输出的能力。
也许定义得并不准确，但每个人对事物的理解都不相同，上面只是我的理解。
并且，我需要更深入的理解：
学习一定要有输入，不可能无中生有，输入不一定来自外界，内省已有的东西也算输入 学习一定能够输出，输出的方式有很多，文字，演讲，行为等，如果无法清晰地输出，那说明学习不到位 学习会构建认知记忆，一定会在大脑留下什么，不管是神经元的连接，还是细胞的改变，并且长期有效 学习不能全部吸收，需要有过滤器，这个过滤器就是[做人做事的原则]()。
输入 输入有很多种方式，比如被动灌输（音视频，被授课），主动输入（阅读，搜索）。
当然，主动输入的效果会好些，我比较喜欢阅读。
快速阅读 什么时候能用快速阅读？ 我之前觉得快速阅读要区分对象，能够使用快速阅读的对象才能用（比如工具类书籍：励志成长类，社科普及类）。 《快速阅读术》里面也有提过选择快速阅读的书籍。 不过，读得越来越多、越来越快之后，我发现理解能力是会提升的，只是非常费脑。
不过，为了享受一部文学作品，就可以慢下来。
如何快速阅读 建立书籍索引：通过浏览目录，甚至全书的小标题，分析作者的协作思路 划重点：每个小标题下的内容用一句话总结，一句话不行就2句话 输出精简复制版笔记，这份笔记就是对书籍内容的高度概括 输出自己的感悟，根据概括联系自身情况，输出更多文章，变成自己的知识 如果有纸质书籍当然好，可以手写。否则，电子版书籍用平板或电脑，需要大一些的屏幕，才能快速浏览。</description></item><item><title>思考力</title><link>https://jimolonely.github.io/ksa/ability/thinking/</link><pubDate>Sun, 10 Apr 2022 21:40:31 +0800</pubDate><guid>https://jimolonely.github.io/ksa/ability/thinking/</guid><description> 当我遇到没有头绪的问题时，我会遍历下面的思维方式，总会得到一些启发，希望对你也有帮助。
以终为始 出自【高效能人士的7个习惯】。
这种思维强调目标的重要性。
实操步骤：
目标：描述未来一件事情的样子，或者确定一个梦想的样子 付出行动，达成目标 关键点：
不是现在有什么就干什么，不是走一步看一步。 而是始终靠着目标努力，一步步逼近想要的样子。
长线+不变思维 来自贝索斯。
如果你做的每一件事把眼光放到未来三年，和你同台竞技的人很多；但是如果你的目光能放到未来七年，那么可以和你竞争的就很少了，因为很少有公司愿意做那么长远的打算。 —— 杰夫·贝索斯（2011年）
我们总是希望预测未来，问出“未来几年会有什么变化？机会？”之类的问题。 贝索斯的想法恰好相反，他会问：“未来很长时间都不变的东西是什么？”
在我简单思考下，不变的东西真的非常多：
某些人性：贪便宜，偷懒，追求稳定，虚荣心等 更快：更快的交通、快递、网速、计算速度 这种长线思维对投资具有指导意义，投资的本质是公司的运作，需要一定时间成长和盈利。 价值投资，就是找到那些不变的衡量指标，然后等待成果。
降维打击 最早出现在《三体》里，本指通过技术将高维空间变为低维空间的攻击手段。
实际上，这也可用在思维方式上。怎么使用呢？
提升问题的层次，从时间、空间、阶层考虑 从个体到群体：我自己会遇到的问题大家是否都会遇到？大家遇到是怎么解决的？有没有更好的方法？ 从短期到长期：当前解决不了的问题拉长到1年、10年呢？ 从小范围到全世界：也就是工业化批量生产能够降低成本，薄利多销的思想 很多小问题换个尺度就很容易解决了，也有很多问题换个尺度就变成难题了。
因此，降维打击&amp;amp;升维打击是相互的。
逆向思维 关于逆向思维，查理·芒格最有名的一句话就是：“如果我知道我要在哪里死去，我就永远不去那里。”
离散数学里用 非A 表示 A 的反义，也是逆向推理。
逆向思维很好理解，我的理解是：
做一件事，首先考虑其最坏的结果，然后避免变成那样。 从结果往前推原因 这里有一些例子：
开车最坏的结果是出车祸，所以一定要避免追求速度，而要保证安全第一 健身最坏的结果是受伤，所以健身的目的是在不受伤的情况下提高身体素质，否则得不偿失 做年计划时，最难的不是“我要做什么”，而是“我不做什么”，因为往往是那些无关紧要的事耽搁了完成正事。</description></item><item><title>身体能力</title><link>https://jimolonely.github.io/ksa/ability/body/</link><pubDate>Sun, 10 Apr 2022 21:38:16 +0800</pubDate><guid>https://jimolonely.github.io/ksa/ability/body/</guid><description>我将身体能力分为2个部分：
外表魅力 运动能力 身体能力是人类作为生物的基本能力，属于生物本能，是低端的生存能力。 但非常关键，一切高尚的活动都基于一个健康的身体。
外表魅力 外表 据有关研究表明，外表漂亮的人更容易得到他人关注，人生旅途会更顺畅。
我觉得有一定道理，毕竟看脸在哪个时代都存在。
所以，长得漂亮本身就是一种能力。
魅力 但这里还有2个字：魅力。
魅力是一种未解之谜，因为对不同的人有不同解释，并不是普适性规律。 所以我觉得，魅力和表演力相当，一个人的表演能力越强，魅力值越高。 是那种举手投足都能感到不一样的能力。
我的外表魅力 外表我不打算改变了，顶多通过健身微调肌肉轮廓，也会有很大的气质变化。
魅力是可以改变的，通过精心设计自己的肢体语言，能给人不一样的感觉。
所以
我的外表评分7.5分。理由是：长相人畜无害，身材好，饱满而不突兀的胸肌，狗头腰，6块腹肌，匀称的身体。 我的魅力评分6分，表演这块不太熟练，肢体语言夸张且具有破坏力。 运动能力 根据人类体力极限区分等级，用常见的运动来评判，因为很多运动考验的都是综合能力，所以就不细分了。 主要包括：耐力、爆发力、力量、协调性、技巧性、速度。
下面的满分成绩并非人类极限或世界纪录，而是一个优秀运动员的成绩。
运动项 满分成绩 我的成绩 我的评分 跑步10公里 35min 50min 7 跳远 3.2m 2.7 8.4 1分钟引体向上 50个 19 3.8 1分钟跳绳 320个 230 7.2 1口气俯卧撑 200个 80 4 俄挺 30秒 3秒 1 倒立 3min 2min 6.</description></item><item><title>表达能力</title><link>https://jimolonely.github.io/ksa/ability/express/</link><pubDate>Sun, 10 Apr 2022 21:36:48 +0800</pubDate><guid>https://jimolonely.github.io/ksa/ability/express/</guid><description/></item><item><title>性情</title><link>https://jimolonely.github.io/ksa/ability/nature/</link><pubDate>Sun, 10 Apr 2022 21:36:31 +0800</pubDate><guid>https://jimolonely.github.io/ksa/ability/nature/</guid><description/></item><item><title>记忆力</title><link>https://jimolonely.github.io/ksa/ability/memory/</link><pubDate>Sun, 10 Apr 2022 21:34:48 +0800</pubDate><guid>https://jimolonely.github.io/ksa/ability/memory/</guid><description/></item><item><title>盲打技能</title><link>https://jimolonely.github.io/ksa/skill/basic/touch-typing-skill/</link><pubDate>Sun, 10 Apr 2022 17:45:13 +0800</pubDate><guid>https://jimolonely.github.io/ksa/skill/basic/touch-typing-skill/</guid><description>在目前的计算机发展阶段，打字依然是计算机最主流的输入方式之一。离以后的脑机交互成熟还有不远距离。
打字更是编程最基础的技能。
打字的技能会形成肌肉记忆，即便很久不练也不会退步。
为什么要练习盲打？ 即便是打字这么简单的事情，也是要给自己一个理由去做的。
有一天，我发现有的人在打字时，不停地低头看键盘，效率和正确性都很低，我觉得特别丑陋。 然后我发现自己也好不到哪去，我决定改变它。
所以，理由很普通：
打字快很酷,特别是配上青轴的机械键盘(要有底气在公司使用) 打字快有助于提高效率 怎么练习盲打？ 推荐一个网站：https://www.keybr.com/
这个网站通过循序渐进地训练，从零开始，可以看到自己每个键位的错误率和速度，分析指标非常多。
除了偶尔会崩溃。
通过 https://www.keybr.com/high-scores 查看那些高手。
根据排行榜，你的平均速度能稳定在80WPM，就有机会上榜。
你可以分享自己的练习主页, 我的练习主页是 : https://www.keybr.com/profile/n5gaxhw
最终成效如何？ 我练习了一个多月，从最开始的 30WPM提升到 43.4WPM。是，我确实很菜的样子，但我不慌，这才是基础技能而已。
当然这是平均速度，现在平均速度我能稳定在 50-60,只是之前太差拉低了平均值。
但即便是这样，依然超过了 74%的人。
我觉得这个速度已经足够应付目前编码速度，所以暂时停下来了。
但追求更快更强的心不会停止，欢迎来战。</description></item><item><title>Hugo使用技巧</title><link>https://jimolonely.github.io/posts/hugo/hugo-usage-skill/</link><pubDate>Sun, 10 Apr 2022 08:20:32 +0800</pubDate><guid>https://jimolonely.github.io/posts/hugo/hugo-usage-skill/</guid><description>如何引用站内文章 下面的 \\去掉
{{&amp;lt; ref &amp;#34;blog/post.md&amp;#34; &amp;gt;}} =&amp;gt; https://example.com/blog/post/ {{&amp;lt; ref &amp;#34;post.md#tldr&amp;#34; &amp;gt;}} =&amp;gt; https://example.com/blog/post/#tldr:caffebad {{&amp;lt; relref &amp;#34;post.md&amp;#34; &amp;gt;}} =&amp;gt; /blog/post/ {{&amp;lt; relref &amp;#34;blog/post.md#tldr&amp;#34; &amp;gt;}} =&amp;gt; /blog/post/#tldr:caffebad {{&amp;lt; ref &amp;#34;#tldr&amp;#34; &amp;gt;}} =&amp;gt; #tldr:badcaffe {{&amp;lt; relref &amp;#34;#tldr&amp;#34; &amp;gt;}} =&amp;gt; #tldr:badcaffe 新窗口打开链接 根据文档：https://gohugo.io/getting-started/configuration-markup#blackfriday
以前默认的markdown解析引擎是 blackfriday,现在换成了 GoldMark。 但是没发现 GlodMark有配置 a标签 blank的属性，所以暂时用 blackfriday。
[markup] defaultMarkdownHandler = &amp;#39;blackfriday&amp;#39; [markup.blackFriday] hrefTargetBlank = true 会在命令行收到弃用的警告：
markup.defaultMarkdownHandler=blackfriday is deprecated and will be removed in a future release. See https://gohugo.</description></item><item><title>Hugo使用入门</title><link>https://jimolonely.github.io/posts/hugo/hugo-github-pages/</link><pubDate>Fri, 08 Apr 2022 15:49:26 +0800</pubDate><guid>https://jimolonely.github.io/posts/hugo/hugo-github-pages/</guid><description>创建github项目 因为一开始我就打算发布在Github Pages上，所以需要将 Hugo这个项目叫做 {username}.github.io, 我的是：https://github.com/jimolonely/jimolonely.github.io.
然后最后发布时，会创建出一个 gh-pages分支来发布页面。
下面是在这个项目里按照 Hugo的方式将博客页搭好。
安装hugo https://gohugo.io/getting-started/installing/
创建hugo项目 hugo new site jimolonely.github.io 启动服务 -D代表也显示草稿draft=true.
hugo server -D 正常情况应该一片空白，下面我们来创建主页。
创建主页 hugo new _index.md 然后在里面随便写点什么。
重要配置 在 config.toml里配置。
基础配置 语言，域名，博客标题
baseURL = &amp;#39;http://jimolonely.github.io/&amp;#39; languageCode = &amp;#39;zh-cn&amp;#39; title = &amp;#39;jimo power&amp;#39; 配置菜单 注意和语言对应
[[languages.zh-cn.menu.main]] name = &amp;#34;About&amp;#34; weight = 1 url = &amp;#34;about/&amp;#34; [[languages.zh-cn.menu.main]] name = &amp;#34;Blog&amp;#34; weight = 2 url = &amp;#34;posts/&amp;#34; [[languages.zh-cn.menu.main]] name = &amp;#34;Projects&amp;#34; weight = 3 url = &amp;#34;projects/&amp;#34; [[languages.</description></item></channel></rss>